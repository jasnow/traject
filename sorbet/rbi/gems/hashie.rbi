# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hashie/all/hashie.rbi
#
# hashie-3.6.0
module Hashie
  def self.logger; end
  def self.logger=(logger); end
end
module Hashie::Extensions
end
module Hashie::Extensions::StringifyKeys
  def stringify_keys!; end
  def stringify_keys; end
end
module Hashie::Extensions::StringifyKeys::ClassMethods
  def stringify_keys!(hash); end
  def stringify_keys(hash); end
  def stringify_keys_recursively!(object); end
end
module Hashie::Extensions::SymbolizeKeys
  def symbolize_keys!; end
  def symbolize_keys; end
end
module Hashie::Extensions::SymbolizeKeys::ClassMethods
  def symbolize_keys!(hash); end
  def symbolize_keys(hash); end
  def symbolize_keys_recursively!(object); end
end
module Hashie::Extensions::Parsers
end
module Hashie::Extensions::Dash
end
module Hashie::Extensions::Mash
end
module Hashie::Extensions::Array
end
module Hashie::Extensions::IndifferentAccess
  def convert!; end
  def convert_key(key); end
  def hash_lacking_indifference?(other); end
  def hash_with_indifference?(other); end
  def indifferent_access?; end
  def indifferent_default(key = nil); end
  def indifferent_delete(key); end
  def indifferent_fetch(key, *args, &block); end
  def indifferent_key?(key); end
  def indifferent_replace(other_hash); end
  def indifferent_update(other_hash); end
  def indifferent_value(value); end
  def indifferent_values_at(*indices); end
  def indifferent_writer(key, value); end
  def merge!(*arg0); end
  def merge(*args); end
  def self.included(base); end
  def self.inject!(hash); end
  def self.inject(hash); end
end
module Hashie::Extensions::MergeInitializer
  def initialize(hash = nil, default = nil, &block); end
end
module Hashie::Extensions::Dash::IndifferentAccess
  def self.included(base); end
end
module Hashie::Extensions::Dash::IndifferentAccess::ClassMethods
  def property?(name); end
  def transformation_exists?(name); end
  def transformed_property(property_name, value); end
  def translation_exists?(name); end
end
module Hashie::Extensions::PrettyInspect
  def hashie_inspect; end
  def self.included(base); end
end
class Hashie::Hash < Hash
  def flexibly_convert_to_hash(object, options = nil); end
  def hash_inspect; end
  def inspect; end
  def to_hash(options = nil); end
  def to_json(*args); end
  def to_mash; end
  include Hashie::Extensions::PrettyInspect
  include Hashie::Extensions::StringifyKeys
end
class Hashie::Dash < Hashie::Hash
  def [](property); end
  def []=(property, value); end
  def _regular_reader(arg0); end
  def _regular_writer(arg0, arg1); end
  def assert_property_exists!(property); end
  def assert_property_required!(property, value); end
  def assert_property_set!(property); end
  def assert_required_attributes_set!; end
  def fail_no_property_error!(property); end
  def fail_property_required_error!(property); end
  def hash_inspect; end
  def initialize(attributes = nil, &block); end
  def initialize_attributes(attributes); end
  def inspect; end
  def merge!(other_hash); end
  def merge(other_hash); end
  def replace(other_hash); end
  def required?(property); end
  def self.defaults; end
  def self.define_getter_for(property_name); end
  def self.define_setter_for(property_name); end
  def self.getters; end
  def self.inherited(klass); end
  def self.properties; end
  def self.property(property_name, options = nil); end
  def self.property?(name); end
  def self.required?(name); end
  def self.required_properties; end
  def to_s; end
  def update_attributes!(attributes); end
  def update_attributes(attributes); end
  include Hashie::Extensions::PrettyInspect
end
