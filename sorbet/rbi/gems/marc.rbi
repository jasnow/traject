# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/marc/all/marc.rbi
#
# marc-1.0.4
module MARC
end
class MARC::FieldMap < Array
  def clean; end
  def clean=(arg0); end
  def each_by_tag(tags); end
  def freeze; end
  def initialize; end
  def reindex; end
  def tag_list; end
  def tags; end
end
class MARC::Record
  def <<(field); end
  def ==(other); end
  def =~(regex); end
  def [](tag); end
  def append(field); end
  def each; end
  def each_by_tag(filter); end
  def fields(filter = nil); end
  def initialize; end
  def leader; end
  def leader=(arg0); end
  def self.new_from_hash(h); end
  def self.new_from_marc(raw, params = nil); end
  def self.new_from_marchash(mh); end
  def tags; end
  def to_dublin_core; end
  def to_hash; end
  def to_marc; end
  def to_marchash; end
  def to_s; end
  def to_xml; end
  include Enumerable
end
class MARC::DataField
  def ==(other); end
  def =~(regex); end
  def [](code); end
  def append(subfield); end
  def codes(dedup = nil); end
  def each; end
  def indicator1; end
  def indicator1=(arg0); end
  def indicator2; end
  def indicator2=(arg0); end
  def initialize(tag, i1 = nil, i2 = nil, *subfields); end
  def subfields; end
  def subfields=(arg0); end
  def tag; end
  def tag=(arg0); end
  def to_hash; end
  def to_marchash; end
  def to_s; end
  def value; end
  include Enumerable
end
class MARC::ControlField
  def ==(other); end
  def =~(regex); end
  def initialize(tag, value = nil); end
  def self.control_tag?(tag); end
  def self.control_tags; end
  def tag; end
  def tag=(arg0); end
  def to_hash; end
  def to_marchash; end
  def to_s; end
  def value; end
  def value=(arg0); end
end
class MARC::Subfield
  def ==(other); end
  def code; end
  def code=(arg0); end
  def initialize(code = nil, value = nil); end
  def to_s; end
  def value; end
  def value=(arg0); end
end
class MARC::Reader
  def decode(marc); end
  def each; end
  def each_raw; end
  def initialize(file, options = nil); end
  def self.decode(marc, params = nil); end
  def self.set_encoding(str, params); end
  include Enumerable
end
class MARC::ForgivingReader < MARC::Reader
  def each; end
end
class MARC::Writer
  def allow_oversized; end
  def allow_oversized=(arg0); end
  def close; end
  def initialize(file); end
  def self.encode(record, allow_oversized = nil); end
  def self.format_byte_count(number, allow_oversized, num_digits = nil); end
  def write(record); end
end
class MARC::Exception < RuntimeError
end
class MARC::XMLWriter
  def close; end
  def initialize(file, opts = nil); end
  def self.encode(record, opts = nil); end
  def write(record); end
end
class MARC::XMLParseError < StandardError
end
module MARC::MagicReader
  def self.extended(receiver); end
end
module MARC::GenericPullParser
  def characters(text); end
  def end_element_namespace(name, prefix = nil, uri = nil); end
  def start_element_namespace(name, attributes = nil, prefix = nil, uri = nil, ns = nil); end
  def yield_record; end
end
module MARC::NokogiriReader
  def attributes_to_hash(attributes); end
  def each(&block); end
  def error(evt); end
  def init; end
  def method_missing(methName, *args); end
  def self.extended(receiver); end
  include MARC::GenericPullParser
end
module MARC::REXMLReader
  def build_record; end
  def each; end
  def init; end
  def self.extended(receiver); end
  def strip_ns(str); end
end
module MARC::JREXMLReader
  def self.extended(receiver); end
end
module MARC::LibXMLReader
  def build_record; end
  def each; end
  def init; end
  def self.extended(receiver); end
end
class MARC::XMLReader
  def initialize(file, options = nil); end
  def parser; end
  def self.best_available!; end
  def self.best_available; end
  def self.choose_parser(p); end
  def self.jrexml!; end
  def self.nokogiri!; end
  def self.parser; end
  def self.parser=(p); end
  def self.parsers; end
  def self.rexml!; end
  include Enumerable
end
class MARC::DublinCore
  def self.get_field_value(field); end
  def self.map(record); end
end
