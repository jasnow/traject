# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/yell/all/yell.rbi
#
# yell-2.2.0
module Yell
  def self.[](name); end
  def self.[]=(name, logger); end
  def self.__deprecate__(version, message, options = nil); end
  def self.__fetch__(hash, *args); end
  def self.__warn__(*messages); end
  def self.env; end
  def self.format(pattern = nil, date_pattern = nil, &block); end
  def self.level(val = nil); end
  def self.load!(file); end
  def self.new(*args, &block); end
  def self.register(name, klass); end
end
module Yell::Helpers
end
module Yell::Helpers::Base
  def inspectables; end
  def reset!; end
end
module Yell::Helpers::Adapter
  def adapter(type = nil, *args, &block); end
  def adapters; end
  def reset!; end
end
module Yell::Helpers::Formatter
  def format; end
  def format=(pattern); end
  def formatter; end
  def formatter=(pattern); end
  def reset!; end
end
module Yell::Helpers::Level
  def inspectables; end
  def level; end
  def level=(severity); end
  def reset!; end
end
module Yell::Helpers::Tracer
  def inspectables; end
  def reset!; end
  def trace; end
  def trace=(severity); end
end
module Yell::Helpers::Silencer
  def reset!; end
  def silence!(*messages); end
  def silence(*patterns); end
  def silencer; end
end
class Yell::Configuration
  def self.load!(file); end
end
class Yell::LoggerNotFound < StandardError
  def message; end
end
class Yell::Repository
  def __fetch__(name); end
  def initialize; end
  def loggers; end
  def self.[](name); end
  def self.[]=(name, logger); end
  def self.allocate; end
  def self.instance; end
  def self.loggers; end
  def self.new(*arg0); end
  extend MonitorMixin
  extend Singleton::SingletonClassMethods
  include Singleton
end
class Yell::Event
  def backtrace!; end
  def caller_index; end
  def extract!(options); end
  def file; end
  def hostname; end
  def initialize(logger, options, *messages); end
  def level; end
  def line; end
  def messages; end
  def method; end
  def name; end
  def pid; end
  def progname; end
  def thread_id; end
  def time; end
end
class Yell::Event::Options
  def <=>(other); end
  def caller_offset; end
  def initialize(severity, caller_offset); end
  def severity; end
  def to_i; end
  def to_int; end
  include Comparable
end
class Yell::Level
  def <=>(other); end
  def ==(other); end
  def ascending!(index); end
  def at(*severities); end
  def at?(severity); end
  def calculate!(modifier, severity); end
  def descending!(index); end
  def each; end
  def gt(severity); end
  def gte(severity); end
  def index_from(severity); end
  def initialize(*severities); end
  def inspect; end
  def interpret(severities); end
  def lt(severity); end
  def lte(severity); end
  def set!(index, val = nil); end
  def set(*severities); end
  def severities; end
  def to_i; end
  def to_int; end
  include Comparable
end
class Yell::Formatter
  def date_pattern; end
  def define_call_method!; end
  def define_date_method!; end
  def initialize(*args, &block); end
  def inspect; end
  def level(sev, length = nil); end
  def message(messages); end
  def noop; end
  def pattern; end
  def to_sprintf(table); end
end
class Yell::Formatter::Modifier
  def call(message); end
  def initialize; end
  def set(key, &block); end
end
class Yell::Formatter::Builder
  def date_pattern; end
  def date_pattern=(arg0); end
  def initialize(pattern = nil, date_pattern = nil, &block); end
  def modifier; end
  def modify(key, &block); end
  def pattern; end
  def pattern=(arg0); end
end
class Yell::Silencer
  def add!(pattern); end
  def add(*patterns); end
  def call(*messages); end
  def fetch(pattern); end
  def initialize(*patterns); end
  def inspect; end
  def matches?(message); end
  def patterns; end
end
class Yell::Silencer::PresetNotFound < StandardError
  def message; end
end
module Yell::Adapters
  def self.new(type, options = nil, &block); end
  def self.register(name, klass); end
end
class Yell::Adapters::Base < Monitor
  def close!; end
  def close; end
  def initialize(options = nil, &block); end
  def inspect; end
  def inspectables; end
  def open!; end
  def self.close(&block); end
  def self.compile!(name, &block); end
  def self.define!(name, _m, m, &block); end
  def self.open(&block); end
  def self.setup(&block); end
  def self.write(&block); end
  def setup!(options); end
  def write!(event); end
  def write(event); end
  def write?(event); end
  include Yell::Helpers::Base
  include Yell::Helpers::Level
end
class Yell::Adapters::Io < Yell::Adapters::Base
  def close!; end
  def colorize!; end
  def colors; end
  def colors=(arg0); end
  def inspectables; end
  def open!; end
  def setup!(options); end
  def stream; end
  def sync; end
  def sync=(arg0); end
  def write!(event); end
  include Yell::Helpers::Formatter
end
class Yell::Adapters::Stdout < Yell::Adapters::Io
  def open!; end
end
class Yell::Adapters::Stderr < Yell::Adapters::Io
  def open!; end
end
class Yell::Adapters::File < Yell::Adapters::Io
  def default_filename; end
  def open!; end
  def setup!(options); end
end
class Yell::Adapters::Datefile < Yell::Adapters::File
  def cleanup!; end
  def cleanup?; end
  def close!; end
  def close?; end
  def date_pattern; end
  def date_pattern=(arg0); end
  def filename_for(date); end
  def header!; end
  def header; end
  def header=(arg0); end
  def header?; end
  def header_from(file); end
  def inspectables; end
  def keep; end
  def keep=(arg0); end
  def setup!(options); end
  def symlink!; end
  def symlink; end
  def symlink=(arg0); end
  def symlink?; end
  def write!(event); end
end
class Yell::AdapterNotFound < StandardError
end
class Yell::Adapters::Collection
  def add(type = nil, *args, &block); end
  def close; end
  def empty?; end
  def initialize(options = nil); end
  def write(event); end
end
class Yell::Logger
  def add(options, *messages, &block); end
  def close; end
  def debug(*m, &b); end
  def debug?; end
  def error(*m, &b); end
  def error?; end
  def extract!(*list); end
  def fatal(*m, &b); end
  def fatal?; end
  def info(*m, &b); end
  def info?; end
  def initialize(*args, &block); end
  def inspect; end
  def inspectables; end
  def name; end
  def name=(val); end
  def unknown(*m, &b); end
  def unknown?; end
  def warn(*m, &b); end
  def warn?; end
  def write(event); end
  include Yell::Helpers::Adapter
  include Yell::Helpers::Base
  include Yell::Helpers::Formatter
  include Yell::Helpers::Level
  include Yell::Helpers::Silencer
  include Yell::Helpers::Tracer
end
module Yell::Loggable
  def logger; end
  def self.included(base); end
end
module Yell::Loggable::ClassMethods
  def logger; end
end
class Logger
  def add_with_yell(severity, message = nil, progname = nil, &block); end
  def add_without_yell(severity, message = nil, progname = nil); end
  def level_with_yell=(level); end
  def level_without_yell=(severity); end
end
